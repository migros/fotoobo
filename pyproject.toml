[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "fotoobo"
version = "1.1.0"
description = "The awesome Fortinet Toolbox"
authors = ["Patrik Spiess <patrik.spiess@mgb.ch>", "Lukas Murer-JÃ¤ckle <lukas.murer@mgb.ch>"]
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.8.0, <3.13"
typer = "~0.6.0"
rich = "~12.5.1"
PyYAML = "~6.0.0"
requests = "~2.31.0"
Jinja2 = "~3.1.2"

[tool.poetry.dev-dependencies]
pytest = "~7.2.0"
black = "~22.10.0"
mypy = ">0.9, <1.0"
tox = "~4.4.0"
pylint = "~2.15.0"
pytest-cov = "~4.0.0"
types-requests = "~2.27.11"
isort = "~5.10.1"
types-PyYAML = "~6.0.5"
pygount = "~1.5.0"
Sphinx = "~6.2.0"
sphinx-rtd-theme = "~1.2.0"

[tool.poetry.scripts]
fotoobo = "fotoobo.main:main"

# isort is used to organize-imports
[tool.isort]
sections = ['FUTURE', 'STDLIB', 'THIRDPARTY', 'FIRSTPARTY', 'LOCALFOLDER']

[tool.pylint.'MESSAGES CONTROL']
disable = [
    "import-error",
    "similarities",
    "too-few-public-methods"
]
enable = [ "useless-suppression" ]

[tool.black]
line-length = 100

[tool.mypy]
strict=true
warn_unused_ignores=true
ignore_missing_imports=true
disallow_untyped_decorators=false


# here we define the tox settings
# we do it inline because we don't want to have another tox.ini in the project root
# package management is done as described in option 3 on the following FAQ
#  - https://python-poetry.org/docs/master/faq/
[tool.tox]
legacy_tox_ini = """[tox]

isolated_build = True
envlist = pylint, mypy, black, pytest, coverage, requirements, docs, stats
testpaths = "tests"

[testenv:pylint]
description = Code analysis with pylint
skip_install = true
allowlist_externals = poetry, pylint
commands_pre = poetry install
commands = pylint {posargs} fotoobo 

[testenv:mypy]
description = Check typing with mypy
skip_install = true
allowlist_externals = poetry, mypy
commands_pre = poetry install
commands = mypy fotoobo tests {posargs}

[testenv:black]
description = Check formatting with black
skip_install = true
allowlist_externals = poetry, black
commands_pre = poetry install
commands = black --check --diff {posargs} .

[testenv:pytest]
description = do unit tests with pytest
skip_install = true
allowlist_externals = poetry, pytest
commands_pre = poetry install
commands = pytest --basetemp=tests/temp/ {posargs}

[testenv:coverage-integration]
description = check pytest coverage for integration tests (which are under tests/cli)
skip_install = true
allowlist_externals = poetry, pytest
commands_pre = poetry install
commands = pytest --cov-report term-missing --cov-fail-under 90 --cov=fotoobo/cli tests/cli {posargs}

[testenv:coverage]
description = check pytest coverage for unit tests (without cli because these are unit-tests)
skip_install = true
allowlist_externals = poetry, pytest
commands_pre = poetry install
commands = pytest --cov-report term-missing --cov-fail-under 90 --cov=fotoobo --cov-config=.coverage_unittests_rc --ignore=tests/cli tests/ {posargs}

[testenv:requirements]
description = Create a requirements.txt from the Poetry dependencies (used for readthedocs)
skip_install = True
allowlist_externals = poetry
commands = poetry export --without-hashes --with dev --format=requirements.txt --output=docs/requirements.txt

[testenv:docs]
description = Create the documentation with sphinx
skip_install = True
allowlist_externals = poetry, sphinx-build
commands_pre = poetry install
commands = sphinx-build -aEW -b html docs/source docs/build

[testenv:stats]
description = display pygount statistics
skip_install = true
allowlist_externals = poetry, pygount
commands_pre = poetry install
commands = pygount -f summary -s py,toml,json,yaml,md,rst -d -F [...],data
"""
